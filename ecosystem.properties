# ======================================================================================================================
# Campaign Configuration: recommender Campaign - generic recommender to be deployed as sample module
# ======================================================================================================================
### prediction case (Prediction Case Id) ###
predictor.name=recommender

date.format=yyyy-MM-dd'T'HH:mm:ss.SSSSSSXXX
user.profiles=ecosystem_meta

### mongodb setup (MongoDB Setup) ###
mongo.ecosystem.user=ecosystem_user
mongo.ecosystem.password=EcoEco321
mongo.server=localhost
mongo.port=54445
mongo.authentication.source=admin

### (MongoDB Connect String) ###
mongo.connect=mongodb://ecosystem_user:EcoEco321@localhost:54445/?authSource=admin

### logging setup (Logging) ###
logging.database=logging
logging.collection=ecosystemruntime
logging.collection.response=ecosystemruntime_response

### paths (Data Path) and (Models Path) ###
user.data=/data/
user.generated.models=/data/models/

### case specific parameters (Pre-Score Class) and (Post-Score Class) ###
plugin.prescore=com.ecosystem.plugin.customer.PrePredictCustomer
plugin.postscore=com.ecosystem.plugin.customer.PostScoreRecommender

### models (Prediction Model) ###
mojo.key=GLM_1_AutoML_20210818_132258.zip,XGBoost_1_AutoML_20210818_132258.zip

### model selector (Model Selector) ###
#predictor.selector.setup={database:'mongodb',db:'ecosystem', table:'table',lookup:{key:'key',value:123,fields:'selector_key'}}
#predictor.selector.model={'key_value_a':[1],'key_value_b':[2]}

### parameter lookup (Parameters from Data Source) ###
predictor.param.lookup={predictor:'recommender',mojo:1,database:'mongodb',db:'recommender',table:'recommender_training_data_multinomial',lookup:{key:'customer',value:123},result:{parm1:'field1', parm2:'field2'}}
predictor.param.lookup.features=numberOfChildren,region,age,numberOfAddresses,customer,segment_enum,balance,personality,labels_proprtyOwnership,labels_maritalStatus,labels_language,labels_gender,offer
#predictor.param.lookup.default={"feature1":0,"feature2":1}

### Offer Matrix (Offer Matrix) ###
#predictor.offer.matrix={database:'mongodb',db:'vodacom', table:'product_offer_matrix'}
#predictor.offer.matrix={database:'mongodb',db:'vodacom', table:'product_offer_matrix', key:'id'}

### dynamic pulse responder params (Additional Corpora) ###
#predictor.corpora=[{name:'dynamic_engagement',database:'mongodb',db:'recommender',table:'recommender_feature_store', type:'dynamic_engagement', update:true, uuid:'ae519aad-fa20-4cf7-8e6e-e55323af152a'}]

### White list feature (Whitelist) ###
##    whitelist table: customer_key, white_list of offers comma separated
## example cassandra setup of whitelist:
##    CREATE TABLE ecosystem.balance_enquiry_whitelist(customer_key BIGINT, white_list list<text>, PRIMARY KEY(customer_key));
##    INSERT INTO ecosystem.balance_enquiry_whitelist(customer_key,white_list) VALUES (27768089168,['URL_203_A','GSM_57_A','URL_3083_A']);
##    select white_list from ecosystem.balance_enquiry_whitelist where customer_key=27768089168;
#predictor.whitelist.lookup={name:'balance_enquiry',database:'mongodb',db:'ecosystem',table:'balance_enquiry_whitelist'}
#predictor.whitelist.logicin=true

### budget settings (Budget Tracker) ###
## Budget matrix tracker is used to store actual response values against two dimensions and a date range
## Create supporting index to allow for fact extraction:
##    db.ProductStrategyBudget.createIndex({CalendarFrom:1, offer_type:1, cop_car:1})
##    Keywords to access feature store and offer matrix: offer_matrix.<field> and features.<field>
## predictor.offer.budget={name:'case_name',database:'mongodb',db:'logging',table:'case_name_budget'}
#predictor.offer.budget.params={name:'case_name',description:'Sample budget',date_from:'2021-02-01',date_to:'2021-03-01',date_from_name:'CalendarFrom',date_to_name:'CalendarTo',x_name:'customer_segment',x_name_source:'customer_segment',y_name:'offer_counter_group',y_name_source:'offer_matrix.offer_counter_group',number:'Number', number_source:'result.offer_value',group_description:'GroupDescription',generate_if_empty:true}

### Multi Armed Bandit (Epsilon) and (Cache Duration)###
predictor.epsilon=0.05
predictor.offercache=0

### Pattern Selector for offer presentation pattern (Pattern Selector for Responses) ###
## If it's set then offers will be presented based on sequence.
## REMEMBER TO START THE PATTERN FROM 0 TODO NEEDS TO BE CHANGED AND START FROM 1
#predictor.pattern=1,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657
#predictor.pattern=0,1,2,6,8,9,10,11
#predictor.patternduration=10000
